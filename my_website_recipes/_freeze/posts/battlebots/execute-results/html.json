{
  "hash": "882428bf0074a1cf7d8511f9be5f8178",
  "result": {
    "markdown": "---\ntitle: \"BATTLEBOTS\"\ndescription: \"It's robot fighting time!\"\nauthor: \"Lisa\"\ndate: \"2021-01-04\"\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\neditor: visual\ncategories:\n  - datascience\nimage: \"img/bb/BB.jpg\"\n---\n\n\n## What is Battlebots?\n\nBattleBots is a robotic combat TV show. It is an amazing community and clearly a hobby of love by the people that join the show. Robots weigh 250lbs, 500 lbs in special circumstances, and there are strict rules around what is and isn't allowed for weapons. The show spends time both on the 3 minute match and behind the scenes with interviews with the builders, footage of repairs, and last minute modifications as teams compete for the ultimate trophy. \n\n### About Battlebots\n\n - [Official BattleBots page](https://battlebots.com/)\n - [Reddit Battlebots](http://reddit.com/r/battlebots)\n - [Season 5 Rumor Mill at Reddit/r/Battlebots](https://www.reddit.com/r/battlebots/comments/grst5y/the_battlebots_season_5_rumor_mill/)\n - [Combat Robot Resource Guide by Robert Cowan](https://docs.google.com/document/d/1tXSzwzEM2jNGjZ2KYn00ldeHvEru0y3_zlNkVw-F9iI/edit#heading=h.1wa7o4efnhdl)\n\n### Best Fight Videos \n\nAll rights are owned by Battlebots on ABC\n\n::: {.panel-tabset}\n\n#### Minotaur vs. Bombshell\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/89LYj3d1jCw\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n#### Yeti vs. Lock Jaw \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/AqM8zxjfV1M\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n#### Tombstone vs. Bronco\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/X2vSMMXmGdg\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n#### Hypershock + Rake \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/UNk5-3fGNqI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n#### Death Roll vs. End Game \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/RrA1XCtUs8I\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n#### HUGE vs. Bronco\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/jJRskcggTnI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n#### Witch Doctor Vs. actual household items\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/DZLs52pRQis\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n:::\n\n\n## Battlebots Analysis\n\nBelow is my attempt at diving deep into the world of Battlebots to understand what makes some bots more successful than others. All data is from the Battlebots official website, scraped from the web using the Rvest R package developed by Hadley Wickam. \n\n### Messy web scraping to get data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(data.table)\nlibrary(stringr)\n#devtools::install_github(\"lchiffon/wordcloud2\")\nlibrary(wordcloud2)\nlibrary(RColorBrewer)\nlibrary(ggmap)\nlibrary(maps)\nlibrary(ggrepel)\nlibrary(sf)\nlibrary(\"rnaturalearth\")\nlibrary(\"rnaturalearthdata\")\nlibrary(htmlwidgets)\nlibrary(webshot)\nlibrary(tidygeocoder)\nlibrary(rgeos)\n\n\n# Set URL list\n#urls = c(\"https://battlebots.com/robot/yeti-2019/\")\n#url <- \"https://battlebots.com/robot/yeti-2019/\"\n\n# Check if data already exists, if not download it\nif(file.exists(\"./files/battlebotsinfo.csv\")){\n  message(\"Loading saved files\")\n  \n  battlebotsinfo = read.csv(\"./files/battlebotsinfo.csv\", stringsAsFactors=FALSE)\n  battlebotsmatch = read.csv(\"./files/battlebotsmatch.csv\", stringsAsFactors=FALSE)\n  battlebotsstat = read.csv(\"./files/battlebotsstat.csv\", stringsAsFactors=FALSE)\n  \n} else {\n  message(\"Generating battlebots data files\")\n  \n  urls = read.csv(\"./files/battlebotsurls.csv\", stringsAsFactors=FALSE)\n  \n  for( i in 1:nrow(urls) ){\n    url = urls[i,1]\n    \n    print(paste0(\"Reading \", i, \" of \", nrow(urls), \": \", url))\n    \n    # Read info and arrange into table \n    # (note that this isn't actually a table in the html source so we had to jump through some hoops to make that happen)\n    info <- read_html(url) %>%\n      html_nodes(\".info-grid\") %>%\n      html_text()\n    \n    info_df_tmp <- map(info, function(x) {\n      tibble(text = unlist(str_split(x, pattern = \"\\\\n\"))) %>%\n        rowid_to_column(var = \"line\")\n    })\n    \n    info_df <- bind_rows(info_df_tmp, .id = \"page\") \n    \n    # Trim off leading whitespace\n    info_trim <- slice(info_df, which.max(text == \"Robot:\") : n()) %>%\n      select(text)\n    \n    # Split into multiple rows , remediate any cases where Values are part of the Record\n    info_split <- info_trim %>%\n      mutate(text = str_trim(text)) %>% \n      mutate(Record = ifelse(grepl(\":\", text, fixed = TRUE), text, NA)) %>%\n      separate(Record, into = c(\"Record\", \"Value\"), sep = \":\", remove = FALSE) %>%\n      fill(Record) %>%\n      mutate(Value = ifelse(is.na(Value), \n               ifelse(grepl(\":\", text, fixed = TRUE), NA, text), Value )) %>%\n      select(Record, Value) %>%\n      filter(!is.na(Value)) %>%\n      filter(!grepl(\"^\\\\s*$\", Value)) %>%\n      unique() %>%\n      group_by(Record) %>%\n      summarize(Value = paste0(Value, collapse = \", \")) %>%\n      ungroup() %>%\n      pivot_wider(names_from = Record, values_from = Value) %>%\n      mutate_all(as.character)\n    \n    # Robot name \n    robot = info_split$Robot\n    \n    # Read both history tables and wrangle into table form\n    history <- read_html(url) %>%\n      html_nodes(\".igsv-table\") \n    \n    if(length(history) > 0){\n    stat_history <- history[1] %>% html_table(header = TRUE, fill = TRUE)\n    stat_history_df <- stat_history[[1]] %>%\n      mutate(Robot = robot) %>%\n      mutate_all(as.character)\n    }\n    \n    if(length(history) > 1){\n      match_history <- history[2] %>% html_table(header = TRUE, fill = TRUE)\n      match_history_df <- match_history[[1]] %>%\n        mutate(Robot = robot) %>%\n        mutate_all(as.character)\n    }\n    \n    # Compile\n    if(i==1){\n      battlebotsinfo = info_split\n      battlebotsmatch = match_history_df\n      battlebotsstat = stat_history_df\n    } else {\n      battlebotsinfo = bind_rows(battlebotsinfo, info_split)\n      \n      if(length(history) > 0){\n        battlebotsstat = bind_rows(battlebotsstat, stat_history_df)\n      }\n      \n      if(length(history) > 1){\n        battlebotsmatch = bind_rows(battlebotsmatch, match_history_df)\n      }\n      \n    }\n    \n  } # End for loop \n  \n  # Save files to make it easier next time\n  write.csv(battlebotsinfo, \"./files/battlebotsinfo.csv\")\n  write.csv(battlebotsmatch, \"./files/battlebotsmatch.csv\")\n  write.csv(battlebotsstat, \"./files/battlebotsstat.csv\")\n\n}\n\n\n# References:\n# https://community.rstudio.com/t/convert-character-string-into-table/9158\n# https://stackoverflow.com/questions/42419765/convert-one-column-into-a-new-column-every-5-rows-a-numeric-interval\n#  - [Scraping in R rvest](https://www.dataquest.io/blog/web-scraping-in-r-rvest/)\n#  - [Tidy Web Scraping in R Tutorial and Resources](https://towardsdatascience.com/tidy-web-scraping-in-r-tutorial-and-resources-ac9f72b4fe47)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### Frequency of Battlebots Weapon Types\n\n# type_frequency <- battlebotsinfo %>%\n#   group_by(Type) %>%\n#   summarize(freq = n()) %>%\n#   rename(\"word\" = \"Type\")\n#   \n# my_wordcloud1 <- wordcloud2(data=type_frequency, size = 0.5, shape = 'pentagon', color='random-dark')\n# \n# my_wordcloud1\n\n#saveWidget(my_wordcloud, \"tmp.html\", selfcontained = F)\n#webshot(\"tmp.html\", \"./images/wc1.png\", delay = 5)\n\n#wordcloud2(demoFreq, color = \"random-light\", backgroundColor = \"grey\")\n\n# https://towardsdatascience.com/create-a-word-cloud-with-r-bde3e7422e8a\n# https://cran.r-project.org/web/packages/wordcloud2/vignettes/wordcloud.html#lettercloud-function\n```\n:::\n\n\n### Frequency of Builder Day Jobs\n\n\n::: {.cell}\n\n```{.r .cell-code}\njob_frequency <- battlebotsinfo %>%\n  group_by(Job) %>%\n  summarize(freq = n()) %>%\n  rename(\"word\" = \"Job\")\n\nmy_wordcloud2 <- wordcloud2(data=job_frequency, size = 0.25, color='random-dark')\n\nmy_wordcloud2\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-f5ae43c9b4196edd7f8d\" style=\"width:100%;height:464px;\" class=\"wordcloud2 html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f5ae43c9b4196edd7f8d\">{\"x\":{\"word\":[\"Electrical Product Designer, Breakthrough Innovation <96> Stanley Black & Decker\",\"3D Wizard\",\"Architectural Draftsman\",\"Attorney in the Intellectual Property Litigation Practice Group at Alston & Bird\",\"Bugglebots Producer and host\",\"Builder\",\"Builder and driver\",\"Builder/Driver\",\"CEO\",\"Circus Clown\",\"Creative Engineer\",\"CTO at Double Robotics\",\"Design Specialist at the Jacobs Institute for Design Innovation, UC Berkeley\",\"Design, Build, Manage, Drive!\",\"Design, Fabricator and Pilot\",\"Designer and machinist\",\"Designer, builder\",\"Designer, builder and driver\",\"Designer, Builder, and Driver\",\"Designer, Builder, Driver\",\"Designer, Driver\",\"Designer/builder\",\"Driver, electrical, pneumatics, welding, design, and social media\",\"Driver, minister of disinformation\",\"Driver, Organizer\",\"Electro-Mechanical Technician\",\"Embedded Software Engineer\",\"Engineer\",\"Engineer at Westar LLC\",\"Engineering Apprentice\",\"Engineering student\",\"Entrepreneur\",\"Execute the awesomeness.\",\"Fabricator, Driver\",\"Founder, CEO of Domovi\",\"Freelance mechanical design engineer\",\"Fuzzy lives on a ranch in Texas where he raises cows, modifies Jeeps, and builds fighting robots.\",\"Hardware Engineer\",\"Hydrographic Surveyor\",\"Independent Consultant\",\"Inventor\",\"Inventor, Maker, Student, Dentist\",\"Jeans Model\",\"Lead Mechanical Engineer at Moog Space and Defense.\",\"Lecturer\",\"M.E. Student\",\"Mech Engineering Student\",\"Mechanical Design Engineer\",\"Mechanical Designer / Robotics Engineer\",\"Mechanical Engineer\",\"Mechanical Specialist / Mechanical Engineer\",\"Medical device engineer\",\"Medical Device R&D Engineer\",\"Modelmaker\",\"Navy Diver\",\"Owner, Operator\",\"President of Bot Bash Parties\",\"Principal Mechanical Engineer at frog\",\"Process Engineer\",\"Professor of Engineering, Mt. San Antonio College\",\"Professor of Mechanical Engineering at PUC-Rio (Pontifical Catholic University of Rio de Janeiro)\",\"QA Test Analyst (Video Games)\",\"R&D Engineer\",\"Research Engineer\",\"Retired Computer Scientist\",\"Retired Electrical Engineer\",\"Robot Design, coordination of build, design, fabrication, funding\",\"Robot Doctor\",\"Robotics Engineer\",\"Robotics Engineer. Sean designs military EoD robots for Harris Corporation. These robots are used in theater to save human life by identifying, neutralizing, and removing IEDs.\",\"Rocket Scientist (Engineer)\",\"Senior Engineering Technician at Meggitt Airframe Systems\",\"Software Engineer\",\"Software Engineer and Mechatronics Engineer\",\"Student\",\"Tank mechanic\",\"Teacher\",\"Technology Sales and Marketing\",\"Undergraduate Student\",\"User Experience Researcher\",\"WaterJet Coordinator\",\"Weapons/Electronics\"],\"freq\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1],\"fontFamily\":\"Segoe UI\",\"fontWeight\":\"bold\",\"color\":\"random-dark\",\"minSize\":0,\"weightFactor\":9,\"backgroundColor\":\"white\",\"gridSize\":0,\"minRotation\":-0.785398163397448,\"maxRotation\":0.785398163397448,\"shuffle\":true,\"rotateRatio\":0.4,\"shape\":\"circle\",\"ellipticity\":0.65,\"figBase64\":null,\"hover\":null},\"evals\":[],\"jsHooks\":{\"render\":[{\"code\":\"function(el,x){\\n                        console.log(123);\\n                        if(!iii){\\n                          window.location.reload();\\n                          iii = False;\\n\\n                        }\\n  }\",\"data\":null}]}}</script>\n```\n:::\n:::\n\n\n### Map of Builder Locations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Load location data\nif(file.exists(\"./files/battlebotslocation.csv\")){\n  message(\"Loading saved files\")\n  \n  bbmap = read.csv(\"./files/battlebotslocation.csv\", stringsAsFactors=FALSE)\n} else {\n  message(\"Generating battlebots location files\")\n  \n  #Set up the API key for google \n  #Go to: https://cloud.google.com/maps-platform/\n  #register_google(key = \"AIzaSyDmZUFZ-RzL0mnpO9-CELahrnEWdJwYqDw\", write = TRUE)\n  \n  bbmap <- battlebotsinfo %>%\n    select(Robot, Hometown) %>%\n    mutate(Team = paste(\"Team\", Robot, \", from\", Hometown)) %>%\n    mutate_geocode(Hometown)\n  \n  write.csv(bbmap, \"./files/battlebotslocation.csv\")\n}\n  \nworld <- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\np <- ggplot(data = world) + \n  geom_sf(color = \"black\", fill = \"lightgray\") +\n  xlab(\"Longitude\") + ylab(\"Latitude\") +\n  geom_point( data=bbmap, aes(x=lon, y=lat, text=Team), color=\"red\", size=1) +\n  # ggrepel::geom_label_repel(data = bbmap,\n  #            aes(x = lon, y = lat, label = Robot),\n  #            size = 1.5, alpha = 0.8,\n  #            label.r = unit(0.5, \"lines\"), label.size = 0.25,\n  #            segment.color = \"red\", segment.size = 1,\n  #            seed = 1002) +\n  #geom_text_repel(data=bbmap,aes(x = lon, y = lat, label = Robot),box.padding = 0.4,point.padding = 0.25,size=4,show.legend=FALSE)+\n  ggtitle(\"Battlebots Hometowns World map\", subtitle = paste0(\"(\", length(unique(bbmap$Robot)), \" teams)\"))\n\n#pp <- ggplotly(p, tooltip=\"text\")\n\n#assign(\"pp\", plotly::ggplotly(p, tooltip=\"text\"), envir=parent.frame())\n\n#pp\n\np\n```\n\n::: {.cell-output-display}\n![](battlebots_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#htmlwidgets::saveWidget( plotly::ggplotly(p, tooltip=\"text\"), \"tmp3.html\")\n\n#print( htmltools::tags$iframe(src=\"temp.html\", width=640, height=480) )\n\n# <iframe src=\"temp.html\" width='1000px' height='800px'></iframe> \n\n  \n#https://stackoverflow.com/questions/29037851/how-do-i-plot-us-cities-using-ggplot\n#https://stackoverflow.com/questions/22752009/plot-on-ggmap-by-using-city-and-state\n#https://towardsdatascience.com/plotting-spatial-data-in-r-a38a405a07f1\n#https://cran.r-project.org/web/packages/usmap/vignettes/advanced-mapping.html \n#https://www.r-graph-gallery.com/330-bubble-map-with-ggplot2.html\n#https://ggplot2-book.org/maps.html\n#http://yluo86.github.io/rmaps\n#https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html\n#https://www.statsandr.com/blog/world-map-of-visited-countries-in-r/\n#https://cran.r-project.org/web/packages/tidygeocoder/vignettes/tidygeocoder.html\n#https://towardsdatascience.com/reverse-geocoding-in-r-f7fe4b908355\n#https://stackoverflow.com/questions/13905098/how-to-get-the-longitude-and-latitude-coordinates-from-a-city-name-and-country-i\n#https://stackoverflow.com/questions/59144842/why-does-ggplotly-does-not-work-in-rmarkdown-the-same-way-ggplot-does\n```\n:::\n\n\n<br>\n\n### Win Frequency by Robot Type\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#TODO: Add plot showing frequency of type of robot \n\n# type_frequency <- battlebotsinfo %>%\n#   group_by(Type) %>%\n#   summarize(freq = n()) %>%\n#   rename(\"word\" = \"Type\")\n\nwin_frequency_raw <- merge(battlebotsinfo, battlebotsstat, by=\"Robot\") %>%\n  select(Stats, Career, Robot, Type) %>%\n  filter(Stats %in% c(\"Total matches\", \"Total wins\")) %>%\n  #mutate(Career = as.numeric(Stats)) %>%\n  pivot_wider(names_from = Stats, values_from = Career) %>%\n  unnest(`Total wins`) %>%\n  mutate(`Total wins` = as.numeric(`Total wins`),\n         `Total matches` = as.numeric(`Total matches`))\n\ntype_wins <- win_frequency_raw %>%\n  group_by(Type) %>%\n  summarize(wins = sum(`Total wins`) / sum(`Total matches`))\n\nrobot_wins <- win_frequency_raw %>%\n  group_by(Type) %>%\n  mutate(CountType = n()) %>%\n  ungroup() %>%\n  group_by(Robot, Type, CountType) %>%\n  summarize(wins = sum(`Total wins`) / sum(`Total matches`)) %>%\n  filter(CountType > 1) %>%\n  arrange(wins)\n\n\n\np <- ggplot(robot_wins, aes(x=Type, y=wins)) + geom_boxplot() + theme(axis.text.x = element_text(angle = -90, hjust = 1))\n\n\np <- ggplot(robot_wins, aes(x=reorder(Type, -wins, na.rm = TRUE), y=wins)) + geom_boxplot() + theme(axis.text.x = element_text(angle = -90, hjust = 1)) +  labs(y=\"Wins\", x=\"Type\")\np\n```\n\n::: {.cell-output-display}\n![](battlebots_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n## Resources\n\nBattlebots: \n\n - [Official BattleBots page](https://battlebots.com/)\n - [Reddit Battlebots](http://reddit.com/r/battlebots)\n - [Season 5 Rumor Mill at Reddit/r/Battlebots](https://www.reddit.com/r/battlebots/comments/grst5y/the_battlebots_season_5_rumor_mill/)\n - [Combat Robot Resource Guide by Robert Cowan](https://docs.google.com/document/d/1tXSzwzEM2jNGjZ2KYn00ldeHvEru0y3_zlNkVw-F9iI/edit#heading=h.1wa7o4efnhdl)\n \n \nResources for building a similar RMarkdown page: \n\n - [Creating dynamic tabs in Rmarkdown](https://stackoverflow.com/questions/42631642/creating-dynamic-tabs-in-rmarkdown)\n - [HTML Special Features: KU CRMDA Markdown](https://cran.r-project.org/web/packages/stationery/vignettes/HTML_special_features.html)\n - https://github.com/rstudio/rmarkdown/issues/1681\n - [R: 2 column layout in Rmarkdown with tabset](https://stackoverflow.com/questions/58837184/r-2-column-layout-in-rmarkdown-with-tabset)\n - [Scraping in R rvest](https://www.dataquest.io/blog/web-scraping-in-r-rvest/)\n - [Tidy Web Scraping in R Tutorial and Resources](https://towardsdatascience.com/tidy-web-scraping-in-r-tutorial-and-resources-ac9f72b4fe47)",
    "supporting": [
      "battlebots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\r\n<link href=\"../site_libs/wordcloud2-0.0.1/wordcloud.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/wordcloud2-0.0.1/wordcloud2-all.js\"></script>\r\n<script src=\"../site_libs/wordcloud2-0.0.1/hover.js\"></script>\r\n<script src=\"../site_libs/wordcloud2-binding-0.2.1/wordcloud2.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}